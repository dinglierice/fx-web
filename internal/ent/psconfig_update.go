// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fx-web/internal/ent/predicate"
	"fx-web/internal/ent/psconfig"
	"fx-web/internal/ent/psstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PsConfigUpdate is the builder for updating PsConfig entities.
type PsConfigUpdate struct {
	config
	hooks    []Hook
	mutation *PsConfigMutation
}

// Where appends a list predicates to the PsConfigUpdate builder.
func (pcu *PsConfigUpdate) Where(ps ...predicate.PsConfig) *PsConfigUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *PsConfigUpdate) SetCreatedAt(t time.Time) *PsConfigUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillableCreatedAt(t *time.Time) *PsConfigUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PsConfigUpdate) SetUpdatedAt(t time.Time) *PsConfigUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetPsScene sets the "ps_scene" field.
func (pcu *PsConfigUpdate) SetPsScene(s string) *PsConfigUpdate {
	pcu.mutation.SetPsScene(s)
	return pcu
}

// SetNillablePsScene sets the "ps_scene" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsScene(s *string) *PsConfigUpdate {
	if s != nil {
		pcu.SetPsScene(*s)
	}
	return pcu
}

// SetPsFilter sets the "ps_filter" field.
func (pcu *PsConfigUpdate) SetPsFilter(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetPsFilter()
	pcu.mutation.SetPsFilter(u)
	return pcu
}

// SetNillablePsFilter sets the "ps_filter" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsFilter(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetPsFilter(*u)
	}
	return pcu
}

// AddPsFilter adds u to the "ps_filter" field.
func (pcu *PsConfigUpdate) AddPsFilter(u int64) *PsConfigUpdate {
	pcu.mutation.AddPsFilter(u)
	return pcu
}

// SetPsMessage sets the "ps_message" field.
func (pcu *PsConfigUpdate) SetPsMessage(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetPsMessage()
	pcu.mutation.SetPsMessage(u)
	return pcu
}

// SetNillablePsMessage sets the "ps_message" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsMessage(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetPsMessage(*u)
	}
	return pcu
}

// AddPsMessage adds u to the "ps_message" field.
func (pcu *PsConfigUpdate) AddPsMessage(u int64) *PsConfigUpdate {
	pcu.mutation.AddPsMessage(u)
	return pcu
}

// ClearPsMessage clears the value of the "ps_message" field.
func (pcu *PsConfigUpdate) ClearPsMessage() *PsConfigUpdate {
	pcu.mutation.ClearPsMessage()
	return pcu
}

// SetPsEvent sets the "ps_event" field.
func (pcu *PsConfigUpdate) SetPsEvent(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetPsEvent()
	pcu.mutation.SetPsEvent(u)
	return pcu
}

// SetNillablePsEvent sets the "ps_event" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsEvent(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetPsEvent(*u)
	}
	return pcu
}

// AddPsEvent adds u to the "ps_event" field.
func (pcu *PsConfigUpdate) AddPsEvent(u int64) *PsConfigUpdate {
	pcu.mutation.AddPsEvent(u)
	return pcu
}

// ClearPsEvent clears the value of the "ps_event" field.
func (pcu *PsConfigUpdate) ClearPsEvent() *PsConfigUpdate {
	pcu.mutation.ClearPsEvent()
	return pcu
}

// SetPsFeature sets the "ps_feature" field.
func (pcu *PsConfigUpdate) SetPsFeature(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetPsFeature()
	pcu.mutation.SetPsFeature(u)
	return pcu
}

// SetNillablePsFeature sets the "ps_feature" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsFeature(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetPsFeature(*u)
	}
	return pcu
}

// AddPsFeature adds u to the "ps_feature" field.
func (pcu *PsConfigUpdate) AddPsFeature(u int64) *PsConfigUpdate {
	pcu.mutation.AddPsFeature(u)
	return pcu
}

// ClearPsFeature clears the value of the "ps_feature" field.
func (pcu *PsConfigUpdate) ClearPsFeature() *PsConfigUpdate {
	pcu.mutation.ClearPsFeature()
	return pcu
}

// SetPsStrategy sets the "ps_strategy" field.
func (pcu *PsConfigUpdate) SetPsStrategy(u uint64) *PsConfigUpdate {
	pcu.mutation.SetPsStrategy(u)
	return pcu
}

// SetNillablePsStrategy sets the "ps_strategy" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillablePsStrategy(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetPsStrategy(*u)
	}
	return pcu
}

// ClearPsStrategy clears the value of the "ps_strategy" field.
func (pcu *PsConfigUpdate) ClearPsStrategy() *PsConfigUpdate {
	pcu.mutation.ClearPsStrategy()
	return pcu
}

// SetOwnerID sets the "owner_id" field.
func (pcu *PsConfigUpdate) SetOwnerID(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetOwnerID()
	pcu.mutation.SetOwnerID(u)
	return pcu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillableOwnerID(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetOwnerID(*u)
	}
	return pcu
}

// AddOwnerID adds u to the "owner_id" field.
func (pcu *PsConfigUpdate) AddOwnerID(u int64) *PsConfigUpdate {
	pcu.mutation.AddOwnerID(u)
	return pcu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pcu *PsConfigUpdate) ClearOwnerID() *PsConfigUpdate {
	pcu.mutation.ClearOwnerID()
	return pcu
}

// SetManagers sets the "managers" field.
func (pcu *PsConfigUpdate) SetManagers(s string) *PsConfigUpdate {
	pcu.mutation.SetManagers(s)
	return pcu
}

// SetNillableManagers sets the "managers" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillableManagers(s *string) *PsConfigUpdate {
	if s != nil {
		pcu.SetManagers(*s)
	}
	return pcu
}

// ClearManagers clears the value of the "managers" field.
func (pcu *PsConfigUpdate) ClearManagers() *PsConfigUpdate {
	pcu.mutation.ClearManagers()
	return pcu
}

// SetUpdateUser sets the "update_user" field.
func (pcu *PsConfigUpdate) SetUpdateUser(u uint64) *PsConfigUpdate {
	pcu.mutation.ResetUpdateUser()
	pcu.mutation.SetUpdateUser(u)
	return pcu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillableUpdateUser(u *uint64) *PsConfigUpdate {
	if u != nil {
		pcu.SetUpdateUser(*u)
	}
	return pcu
}

// AddUpdateUser adds u to the "update_user" field.
func (pcu *PsConfigUpdate) AddUpdateUser(u int64) *PsConfigUpdate {
	pcu.mutation.AddUpdateUser(u)
	return pcu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (pcu *PsConfigUpdate) ClearUpdateUser() *PsConfigUpdate {
	pcu.mutation.ClearUpdateUser()
	return pcu
}

// SetStrategyID sets the "strategy" edge to the PsStrategy entity by ID.
func (pcu *PsConfigUpdate) SetStrategyID(id uint64) *PsConfigUpdate {
	pcu.mutation.SetStrategyID(id)
	return pcu
}

// SetNillableStrategyID sets the "strategy" edge to the PsStrategy entity by ID if the given value is not nil.
func (pcu *PsConfigUpdate) SetNillableStrategyID(id *uint64) *PsConfigUpdate {
	if id != nil {
		pcu = pcu.SetStrategyID(*id)
	}
	return pcu
}

// SetStrategy sets the "strategy" edge to the PsStrategy entity.
func (pcu *PsConfigUpdate) SetStrategy(p *PsStrategy) *PsConfigUpdate {
	return pcu.SetStrategyID(p.ID)
}

// Mutation returns the PsConfigMutation object of the builder.
func (pcu *PsConfigUpdate) Mutation() *PsConfigMutation {
	return pcu.mutation
}

// ClearStrategy clears the "strategy" edge to the PsStrategy entity.
func (pcu *PsConfigUpdate) ClearStrategy() *PsConfigUpdate {
	pcu.mutation.ClearStrategy()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PsConfigUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PsConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PsConfigUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PsConfigUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PsConfigUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := psconfig.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PsConfigUpdate) check() error {
	if v, ok := pcu.mutation.PsScene(); ok {
		if err := psconfig.PsSceneValidator(v); err != nil {
			return &ValidationError{Name: "ps_scene", err: fmt.Errorf(`ent: validator failed for field "PsConfig.ps_scene": %w`, err)}
		}
	}
	return nil
}

func (pcu *PsConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(psconfig.Table, psconfig.Columns, sqlgraph.NewFieldSpec(psconfig.FieldID, field.TypeUint64))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(psconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(psconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.PsScene(); ok {
		_spec.SetField(psconfig.FieldPsScene, field.TypeString, value)
	}
	if value, ok := pcu.mutation.PsFilter(); ok {
		_spec.SetField(psconfig.FieldPsFilter, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedPsFilter(); ok {
		_spec.AddField(psconfig.FieldPsFilter, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.PsMessage(); ok {
		_spec.SetField(psconfig.FieldPsMessage, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedPsMessage(); ok {
		_spec.AddField(psconfig.FieldPsMessage, field.TypeUint64, value)
	}
	if pcu.mutation.PsMessageCleared() {
		_spec.ClearField(psconfig.FieldPsMessage, field.TypeUint64)
	}
	if value, ok := pcu.mutation.PsEvent(); ok {
		_spec.SetField(psconfig.FieldPsEvent, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedPsEvent(); ok {
		_spec.AddField(psconfig.FieldPsEvent, field.TypeUint64, value)
	}
	if pcu.mutation.PsEventCleared() {
		_spec.ClearField(psconfig.FieldPsEvent, field.TypeUint64)
	}
	if value, ok := pcu.mutation.PsFeature(); ok {
		_spec.SetField(psconfig.FieldPsFeature, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedPsFeature(); ok {
		_spec.AddField(psconfig.FieldPsFeature, field.TypeUint64, value)
	}
	if pcu.mutation.PsFeatureCleared() {
		_spec.ClearField(psconfig.FieldPsFeature, field.TypeUint64)
	}
	if value, ok := pcu.mutation.OwnerID(); ok {
		_spec.SetField(psconfig.FieldOwnerID, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedOwnerID(); ok {
		_spec.AddField(psconfig.FieldOwnerID, field.TypeUint64, value)
	}
	if pcu.mutation.OwnerIDCleared() {
		_spec.ClearField(psconfig.FieldOwnerID, field.TypeUint64)
	}
	if value, ok := pcu.mutation.Managers(); ok {
		_spec.SetField(psconfig.FieldManagers, field.TypeString, value)
	}
	if pcu.mutation.ManagersCleared() {
		_spec.ClearField(psconfig.FieldManagers, field.TypeString)
	}
	if value, ok := pcu.mutation.UpdateUser(); ok {
		_spec.SetField(psconfig.FieldUpdateUser, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedUpdateUser(); ok {
		_spec.AddField(psconfig.FieldUpdateUser, field.TypeUint64, value)
	}
	if pcu.mutation.UpdateUserCleared() {
		_spec.ClearField(psconfig.FieldUpdateUser, field.TypeUint64)
	}
	if pcu.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   psconfig.StrategyTable,
			Columns: []string{psconfig.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   psconfig.StrategyTable,
			Columns: []string{psconfig.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PsConfigUpdateOne is the builder for updating a single PsConfig entity.
type PsConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PsConfigMutation
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *PsConfigUpdateOne) SetCreatedAt(t time.Time) *PsConfigUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillableCreatedAt(t *time.Time) *PsConfigUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PsConfigUpdateOne) SetUpdatedAt(t time.Time) *PsConfigUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetPsScene sets the "ps_scene" field.
func (pcuo *PsConfigUpdateOne) SetPsScene(s string) *PsConfigUpdateOne {
	pcuo.mutation.SetPsScene(s)
	return pcuo
}

// SetNillablePsScene sets the "ps_scene" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsScene(s *string) *PsConfigUpdateOne {
	if s != nil {
		pcuo.SetPsScene(*s)
	}
	return pcuo
}

// SetPsFilter sets the "ps_filter" field.
func (pcuo *PsConfigUpdateOne) SetPsFilter(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetPsFilter()
	pcuo.mutation.SetPsFilter(u)
	return pcuo
}

// SetNillablePsFilter sets the "ps_filter" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsFilter(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetPsFilter(*u)
	}
	return pcuo
}

// AddPsFilter adds u to the "ps_filter" field.
func (pcuo *PsConfigUpdateOne) AddPsFilter(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddPsFilter(u)
	return pcuo
}

// SetPsMessage sets the "ps_message" field.
func (pcuo *PsConfigUpdateOne) SetPsMessage(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetPsMessage()
	pcuo.mutation.SetPsMessage(u)
	return pcuo
}

// SetNillablePsMessage sets the "ps_message" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsMessage(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetPsMessage(*u)
	}
	return pcuo
}

// AddPsMessage adds u to the "ps_message" field.
func (pcuo *PsConfigUpdateOne) AddPsMessage(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddPsMessage(u)
	return pcuo
}

// ClearPsMessage clears the value of the "ps_message" field.
func (pcuo *PsConfigUpdateOne) ClearPsMessage() *PsConfigUpdateOne {
	pcuo.mutation.ClearPsMessage()
	return pcuo
}

// SetPsEvent sets the "ps_event" field.
func (pcuo *PsConfigUpdateOne) SetPsEvent(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetPsEvent()
	pcuo.mutation.SetPsEvent(u)
	return pcuo
}

// SetNillablePsEvent sets the "ps_event" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsEvent(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetPsEvent(*u)
	}
	return pcuo
}

// AddPsEvent adds u to the "ps_event" field.
func (pcuo *PsConfigUpdateOne) AddPsEvent(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddPsEvent(u)
	return pcuo
}

// ClearPsEvent clears the value of the "ps_event" field.
func (pcuo *PsConfigUpdateOne) ClearPsEvent() *PsConfigUpdateOne {
	pcuo.mutation.ClearPsEvent()
	return pcuo
}

// SetPsFeature sets the "ps_feature" field.
func (pcuo *PsConfigUpdateOne) SetPsFeature(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetPsFeature()
	pcuo.mutation.SetPsFeature(u)
	return pcuo
}

// SetNillablePsFeature sets the "ps_feature" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsFeature(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetPsFeature(*u)
	}
	return pcuo
}

// AddPsFeature adds u to the "ps_feature" field.
func (pcuo *PsConfigUpdateOne) AddPsFeature(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddPsFeature(u)
	return pcuo
}

// ClearPsFeature clears the value of the "ps_feature" field.
func (pcuo *PsConfigUpdateOne) ClearPsFeature() *PsConfigUpdateOne {
	pcuo.mutation.ClearPsFeature()
	return pcuo
}

// SetPsStrategy sets the "ps_strategy" field.
func (pcuo *PsConfigUpdateOne) SetPsStrategy(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.SetPsStrategy(u)
	return pcuo
}

// SetNillablePsStrategy sets the "ps_strategy" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillablePsStrategy(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetPsStrategy(*u)
	}
	return pcuo
}

// ClearPsStrategy clears the value of the "ps_strategy" field.
func (pcuo *PsConfigUpdateOne) ClearPsStrategy() *PsConfigUpdateOne {
	pcuo.mutation.ClearPsStrategy()
	return pcuo
}

// SetOwnerID sets the "owner_id" field.
func (pcuo *PsConfigUpdateOne) SetOwnerID(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetOwnerID()
	pcuo.mutation.SetOwnerID(u)
	return pcuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillableOwnerID(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetOwnerID(*u)
	}
	return pcuo
}

// AddOwnerID adds u to the "owner_id" field.
func (pcuo *PsConfigUpdateOne) AddOwnerID(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddOwnerID(u)
	return pcuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pcuo *PsConfigUpdateOne) ClearOwnerID() *PsConfigUpdateOne {
	pcuo.mutation.ClearOwnerID()
	return pcuo
}

// SetManagers sets the "managers" field.
func (pcuo *PsConfigUpdateOne) SetManagers(s string) *PsConfigUpdateOne {
	pcuo.mutation.SetManagers(s)
	return pcuo
}

// SetNillableManagers sets the "managers" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillableManagers(s *string) *PsConfigUpdateOne {
	if s != nil {
		pcuo.SetManagers(*s)
	}
	return pcuo
}

// ClearManagers clears the value of the "managers" field.
func (pcuo *PsConfigUpdateOne) ClearManagers() *PsConfigUpdateOne {
	pcuo.mutation.ClearManagers()
	return pcuo
}

// SetUpdateUser sets the "update_user" field.
func (pcuo *PsConfigUpdateOne) SetUpdateUser(u uint64) *PsConfigUpdateOne {
	pcuo.mutation.ResetUpdateUser()
	pcuo.mutation.SetUpdateUser(u)
	return pcuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillableUpdateUser(u *uint64) *PsConfigUpdateOne {
	if u != nil {
		pcuo.SetUpdateUser(*u)
	}
	return pcuo
}

// AddUpdateUser adds u to the "update_user" field.
func (pcuo *PsConfigUpdateOne) AddUpdateUser(u int64) *PsConfigUpdateOne {
	pcuo.mutation.AddUpdateUser(u)
	return pcuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (pcuo *PsConfigUpdateOne) ClearUpdateUser() *PsConfigUpdateOne {
	pcuo.mutation.ClearUpdateUser()
	return pcuo
}

// SetStrategyID sets the "strategy" edge to the PsStrategy entity by ID.
func (pcuo *PsConfigUpdateOne) SetStrategyID(id uint64) *PsConfigUpdateOne {
	pcuo.mutation.SetStrategyID(id)
	return pcuo
}

// SetNillableStrategyID sets the "strategy" edge to the PsStrategy entity by ID if the given value is not nil.
func (pcuo *PsConfigUpdateOne) SetNillableStrategyID(id *uint64) *PsConfigUpdateOne {
	if id != nil {
		pcuo = pcuo.SetStrategyID(*id)
	}
	return pcuo
}

// SetStrategy sets the "strategy" edge to the PsStrategy entity.
func (pcuo *PsConfigUpdateOne) SetStrategy(p *PsStrategy) *PsConfigUpdateOne {
	return pcuo.SetStrategyID(p.ID)
}

// Mutation returns the PsConfigMutation object of the builder.
func (pcuo *PsConfigUpdateOne) Mutation() *PsConfigMutation {
	return pcuo.mutation
}

// ClearStrategy clears the "strategy" edge to the PsStrategy entity.
func (pcuo *PsConfigUpdateOne) ClearStrategy() *PsConfigUpdateOne {
	pcuo.mutation.ClearStrategy()
	return pcuo
}

// Where appends a list predicates to the PsConfigUpdate builder.
func (pcuo *PsConfigUpdateOne) Where(ps ...predicate.PsConfig) *PsConfigUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PsConfigUpdateOne) Select(field string, fields ...string) *PsConfigUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PsConfig entity.
func (pcuo *PsConfigUpdateOne) Save(ctx context.Context) (*PsConfig, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PsConfigUpdateOne) SaveX(ctx context.Context) *PsConfig {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PsConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PsConfigUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PsConfigUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := psconfig.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PsConfigUpdateOne) check() error {
	if v, ok := pcuo.mutation.PsScene(); ok {
		if err := psconfig.PsSceneValidator(v); err != nil {
			return &ValidationError{Name: "ps_scene", err: fmt.Errorf(`ent: validator failed for field "PsConfig.ps_scene": %w`, err)}
		}
	}
	return nil
}

func (pcuo *PsConfigUpdateOne) sqlSave(ctx context.Context) (_node *PsConfig, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(psconfig.Table, psconfig.Columns, sqlgraph.NewFieldSpec(psconfig.FieldID, field.TypeUint64))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PsConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, psconfig.FieldID)
		for _, f := range fields {
			if !psconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != psconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(psconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(psconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.PsScene(); ok {
		_spec.SetField(psconfig.FieldPsScene, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.PsFilter(); ok {
		_spec.SetField(psconfig.FieldPsFilter, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedPsFilter(); ok {
		_spec.AddField(psconfig.FieldPsFilter, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.PsMessage(); ok {
		_spec.SetField(psconfig.FieldPsMessage, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedPsMessage(); ok {
		_spec.AddField(psconfig.FieldPsMessage, field.TypeUint64, value)
	}
	if pcuo.mutation.PsMessageCleared() {
		_spec.ClearField(psconfig.FieldPsMessage, field.TypeUint64)
	}
	if value, ok := pcuo.mutation.PsEvent(); ok {
		_spec.SetField(psconfig.FieldPsEvent, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedPsEvent(); ok {
		_spec.AddField(psconfig.FieldPsEvent, field.TypeUint64, value)
	}
	if pcuo.mutation.PsEventCleared() {
		_spec.ClearField(psconfig.FieldPsEvent, field.TypeUint64)
	}
	if value, ok := pcuo.mutation.PsFeature(); ok {
		_spec.SetField(psconfig.FieldPsFeature, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedPsFeature(); ok {
		_spec.AddField(psconfig.FieldPsFeature, field.TypeUint64, value)
	}
	if pcuo.mutation.PsFeatureCleared() {
		_spec.ClearField(psconfig.FieldPsFeature, field.TypeUint64)
	}
	if value, ok := pcuo.mutation.OwnerID(); ok {
		_spec.SetField(psconfig.FieldOwnerID, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedOwnerID(); ok {
		_spec.AddField(psconfig.FieldOwnerID, field.TypeUint64, value)
	}
	if pcuo.mutation.OwnerIDCleared() {
		_spec.ClearField(psconfig.FieldOwnerID, field.TypeUint64)
	}
	if value, ok := pcuo.mutation.Managers(); ok {
		_spec.SetField(psconfig.FieldManagers, field.TypeString, value)
	}
	if pcuo.mutation.ManagersCleared() {
		_spec.ClearField(psconfig.FieldManagers, field.TypeString)
	}
	if value, ok := pcuo.mutation.UpdateUser(); ok {
		_spec.SetField(psconfig.FieldUpdateUser, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedUpdateUser(); ok {
		_spec.AddField(psconfig.FieldUpdateUser, field.TypeUint64, value)
	}
	if pcuo.mutation.UpdateUserCleared() {
		_spec.ClearField(psconfig.FieldUpdateUser, field.TypeUint64)
	}
	if pcuo.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   psconfig.StrategyTable,
			Columns: []string{psconfig.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   psconfig.StrategyTable,
			Columns: []string{psconfig.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(psstrategy.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PsConfig{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{psconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
