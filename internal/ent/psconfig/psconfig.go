// Code generated by ent, DO NOT EDIT.

package psconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the psconfig type in the database.
	Label = "ps_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ps_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPsScene holds the string denoting the ps_scene field in the database.
	FieldPsScene = "ps_scene"
	// FieldPsFilter holds the string denoting the ps_filter field in the database.
	FieldPsFilter = "ps_filter"
	// FieldPsMessage holds the string denoting the ps_message field in the database.
	FieldPsMessage = "ps_message"
	// FieldPsEvent holds the string denoting the ps_event field in the database.
	FieldPsEvent = "ps_event"
	// FieldPsFeature holds the string denoting the ps_feature field in the database.
	FieldPsFeature = "ps_feature"
	// FieldPsStrategy holds the string denoting the ps_strategy field in the database.
	FieldPsStrategy = "ps_strategy"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldManagers holds the string denoting the managers field in the database.
	FieldManagers = "managers"
	// FieldUpdateUser holds the string denoting the update_user field in the database.
	FieldUpdateUser = "update_user"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "strategy"
	// PsStrategyFieldID holds the string denoting the ID field of the PsStrategy.
	PsStrategyFieldID = "id"
	// Table holds the table name of the psconfig in the database.
	Table = "ps_configs"
	// StrategyTable is the table that holds the strategy relation/edge.
	StrategyTable = "ps_configs"
	// StrategyInverseTable is the table name for the PsStrategy entity.
	// It exists in this package in order to avoid circular dependency with the "psstrategy" package.
	StrategyInverseTable = "ps_strategies"
	// StrategyColumn is the table column denoting the strategy relation/edge.
	StrategyColumn = "ps_strategy"
)

// Columns holds all SQL columns for psconfig fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPsScene,
	FieldPsFilter,
	FieldPsMessage,
	FieldPsEvent,
	FieldPsFeature,
	FieldPsStrategy,
	FieldOwnerID,
	FieldManagers,
	FieldUpdateUser,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PsSceneValidator is a validator for the "ps_scene" field. It is called by the builders before save.
	PsSceneValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)

// OrderOption defines the ordering options for the PsConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPsScene orders the results by the ps_scene field.
func ByPsScene(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsScene, opts...).ToFunc()
}

// ByPsFilter orders the results by the ps_filter field.
func ByPsFilter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsFilter, opts...).ToFunc()
}

// ByPsMessage orders the results by the ps_message field.
func ByPsMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsMessage, opts...).ToFunc()
}

// ByPsEvent orders the results by the ps_event field.
func ByPsEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsEvent, opts...).ToFunc()
}

// ByPsFeature orders the results by the ps_feature field.
func ByPsFeature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsFeature, opts...).ToFunc()
}

// ByPsStrategy orders the results by the ps_strategy field.
func ByPsStrategy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPsStrategy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByManagers orders the results by the managers field.
func ByManagers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagers, opts...).ToFunc()
}

// ByUpdateUser orders the results by the update_user field.
func ByUpdateUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateUser, opts...).ToFunc()
}

// ByStrategyField orders the results by strategy field.
func ByStrategyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStrategyStep(), sql.OrderByField(field, opts...))
	}
}
func newStrategyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StrategyInverseTable, PsStrategyFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StrategyTable, StrategyColumn),
	)
}
