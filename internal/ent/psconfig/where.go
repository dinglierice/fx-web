// Code generated by ent, DO NOT EDIT.

package psconfig

import (
	"fx-web/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// PsScene applies equality check predicate on the "ps_scene" field. It's identical to PsSceneEQ.
func PsScene(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsScene, v))
}

// PsFilter applies equality check predicate on the "ps_filter" field. It's identical to PsFilterEQ.
func PsFilter(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsFilter, v))
}

// PsMessage applies equality check predicate on the "ps_message" field. It's identical to PsMessageEQ.
func PsMessage(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsMessage, v))
}

// PsEvent applies equality check predicate on the "ps_event" field. It's identical to PsEventEQ.
func PsEvent(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsEvent, v))
}

// PsFeature applies equality check predicate on the "ps_feature" field. It's identical to PsFeatureEQ.
func PsFeature(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsFeature, v))
}

// PsStrategy applies equality check predicate on the "ps_strategy" field. It's identical to PsStrategyEQ.
func PsStrategy(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsStrategy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldOwnerID, v))
}

// Managers applies equality check predicate on the "managers" field. It's identical to ManagersEQ.
func Managers(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldManagers, v))
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldUpdateUser, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// PsSceneEQ applies the EQ predicate on the "ps_scene" field.
func PsSceneEQ(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsScene, v))
}

// PsSceneNEQ applies the NEQ predicate on the "ps_scene" field.
func PsSceneNEQ(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsScene, v))
}

// PsSceneIn applies the In predicate on the "ps_scene" field.
func PsSceneIn(vs ...string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsScene, vs...))
}

// PsSceneNotIn applies the NotIn predicate on the "ps_scene" field.
func PsSceneNotIn(vs ...string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsScene, vs...))
}

// PsSceneGT applies the GT predicate on the "ps_scene" field.
func PsSceneGT(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldPsScene, v))
}

// PsSceneGTE applies the GTE predicate on the "ps_scene" field.
func PsSceneGTE(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldPsScene, v))
}

// PsSceneLT applies the LT predicate on the "ps_scene" field.
func PsSceneLT(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldPsScene, v))
}

// PsSceneLTE applies the LTE predicate on the "ps_scene" field.
func PsSceneLTE(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldPsScene, v))
}

// PsSceneContains applies the Contains predicate on the "ps_scene" field.
func PsSceneContains(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldContains(FieldPsScene, v))
}

// PsSceneHasPrefix applies the HasPrefix predicate on the "ps_scene" field.
func PsSceneHasPrefix(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldHasPrefix(FieldPsScene, v))
}

// PsSceneHasSuffix applies the HasSuffix predicate on the "ps_scene" field.
func PsSceneHasSuffix(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldHasSuffix(FieldPsScene, v))
}

// PsSceneEqualFold applies the EqualFold predicate on the "ps_scene" field.
func PsSceneEqualFold(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEqualFold(FieldPsScene, v))
}

// PsSceneContainsFold applies the ContainsFold predicate on the "ps_scene" field.
func PsSceneContainsFold(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldContainsFold(FieldPsScene, v))
}

// PsFilterEQ applies the EQ predicate on the "ps_filter" field.
func PsFilterEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsFilter, v))
}

// PsFilterNEQ applies the NEQ predicate on the "ps_filter" field.
func PsFilterNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsFilter, v))
}

// PsFilterIn applies the In predicate on the "ps_filter" field.
func PsFilterIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsFilter, vs...))
}

// PsFilterNotIn applies the NotIn predicate on the "ps_filter" field.
func PsFilterNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsFilter, vs...))
}

// PsFilterGT applies the GT predicate on the "ps_filter" field.
func PsFilterGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldPsFilter, v))
}

// PsFilterGTE applies the GTE predicate on the "ps_filter" field.
func PsFilterGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldPsFilter, v))
}

// PsFilterLT applies the LT predicate on the "ps_filter" field.
func PsFilterLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldPsFilter, v))
}

// PsFilterLTE applies the LTE predicate on the "ps_filter" field.
func PsFilterLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldPsFilter, v))
}

// PsMessageEQ applies the EQ predicate on the "ps_message" field.
func PsMessageEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsMessage, v))
}

// PsMessageNEQ applies the NEQ predicate on the "ps_message" field.
func PsMessageNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsMessage, v))
}

// PsMessageIn applies the In predicate on the "ps_message" field.
func PsMessageIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsMessage, vs...))
}

// PsMessageNotIn applies the NotIn predicate on the "ps_message" field.
func PsMessageNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsMessage, vs...))
}

// PsMessageGT applies the GT predicate on the "ps_message" field.
func PsMessageGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldPsMessage, v))
}

// PsMessageGTE applies the GTE predicate on the "ps_message" field.
func PsMessageGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldPsMessage, v))
}

// PsMessageLT applies the LT predicate on the "ps_message" field.
func PsMessageLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldPsMessage, v))
}

// PsMessageLTE applies the LTE predicate on the "ps_message" field.
func PsMessageLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldPsMessage, v))
}

// PsMessageIsNil applies the IsNil predicate on the "ps_message" field.
func PsMessageIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldPsMessage))
}

// PsMessageNotNil applies the NotNil predicate on the "ps_message" field.
func PsMessageNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldPsMessage))
}

// PsEventEQ applies the EQ predicate on the "ps_event" field.
func PsEventEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsEvent, v))
}

// PsEventNEQ applies the NEQ predicate on the "ps_event" field.
func PsEventNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsEvent, v))
}

// PsEventIn applies the In predicate on the "ps_event" field.
func PsEventIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsEvent, vs...))
}

// PsEventNotIn applies the NotIn predicate on the "ps_event" field.
func PsEventNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsEvent, vs...))
}

// PsEventGT applies the GT predicate on the "ps_event" field.
func PsEventGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldPsEvent, v))
}

// PsEventGTE applies the GTE predicate on the "ps_event" field.
func PsEventGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldPsEvent, v))
}

// PsEventLT applies the LT predicate on the "ps_event" field.
func PsEventLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldPsEvent, v))
}

// PsEventLTE applies the LTE predicate on the "ps_event" field.
func PsEventLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldPsEvent, v))
}

// PsEventIsNil applies the IsNil predicate on the "ps_event" field.
func PsEventIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldPsEvent))
}

// PsEventNotNil applies the NotNil predicate on the "ps_event" field.
func PsEventNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldPsEvent))
}

// PsFeatureEQ applies the EQ predicate on the "ps_feature" field.
func PsFeatureEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsFeature, v))
}

// PsFeatureNEQ applies the NEQ predicate on the "ps_feature" field.
func PsFeatureNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsFeature, v))
}

// PsFeatureIn applies the In predicate on the "ps_feature" field.
func PsFeatureIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsFeature, vs...))
}

// PsFeatureNotIn applies the NotIn predicate on the "ps_feature" field.
func PsFeatureNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsFeature, vs...))
}

// PsFeatureGT applies the GT predicate on the "ps_feature" field.
func PsFeatureGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldPsFeature, v))
}

// PsFeatureGTE applies the GTE predicate on the "ps_feature" field.
func PsFeatureGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldPsFeature, v))
}

// PsFeatureLT applies the LT predicate on the "ps_feature" field.
func PsFeatureLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldPsFeature, v))
}

// PsFeatureLTE applies the LTE predicate on the "ps_feature" field.
func PsFeatureLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldPsFeature, v))
}

// PsFeatureIsNil applies the IsNil predicate on the "ps_feature" field.
func PsFeatureIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldPsFeature))
}

// PsFeatureNotNil applies the NotNil predicate on the "ps_feature" field.
func PsFeatureNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldPsFeature))
}

// PsStrategyEQ applies the EQ predicate on the "ps_strategy" field.
func PsStrategyEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldPsStrategy, v))
}

// PsStrategyNEQ applies the NEQ predicate on the "ps_strategy" field.
func PsStrategyNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldPsStrategy, v))
}

// PsStrategyIn applies the In predicate on the "ps_strategy" field.
func PsStrategyIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldPsStrategy, vs...))
}

// PsStrategyNotIn applies the NotIn predicate on the "ps_strategy" field.
func PsStrategyNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldPsStrategy, vs...))
}

// PsStrategyIsNil applies the IsNil predicate on the "ps_strategy" field.
func PsStrategyIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldPsStrategy))
}

// PsStrategyNotNil applies the NotNil predicate on the "ps_strategy" field.
func PsStrategyNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldPsStrategy))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldOwnerID))
}

// ManagersEQ applies the EQ predicate on the "managers" field.
func ManagersEQ(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldManagers, v))
}

// ManagersNEQ applies the NEQ predicate on the "managers" field.
func ManagersNEQ(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldManagers, v))
}

// ManagersIn applies the In predicate on the "managers" field.
func ManagersIn(vs ...string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldManagers, vs...))
}

// ManagersNotIn applies the NotIn predicate on the "managers" field.
func ManagersNotIn(vs ...string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldManagers, vs...))
}

// ManagersGT applies the GT predicate on the "managers" field.
func ManagersGT(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldManagers, v))
}

// ManagersGTE applies the GTE predicate on the "managers" field.
func ManagersGTE(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldManagers, v))
}

// ManagersLT applies the LT predicate on the "managers" field.
func ManagersLT(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldManagers, v))
}

// ManagersLTE applies the LTE predicate on the "managers" field.
func ManagersLTE(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldManagers, v))
}

// ManagersContains applies the Contains predicate on the "managers" field.
func ManagersContains(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldContains(FieldManagers, v))
}

// ManagersHasPrefix applies the HasPrefix predicate on the "managers" field.
func ManagersHasPrefix(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldHasPrefix(FieldManagers, v))
}

// ManagersHasSuffix applies the HasSuffix predicate on the "managers" field.
func ManagersHasSuffix(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldHasSuffix(FieldManagers, v))
}

// ManagersIsNil applies the IsNil predicate on the "managers" field.
func ManagersIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldManagers))
}

// ManagersNotNil applies the NotNil predicate on the "managers" field.
func ManagersNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldManagers))
}

// ManagersEqualFold applies the EqualFold predicate on the "managers" field.
func ManagersEqualFold(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEqualFold(FieldManagers, v))
}

// ManagersContainsFold applies the ContainsFold predicate on the "managers" field.
func ManagersContainsFold(v string) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldContainsFold(FieldManagers, v))
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldEQ(FieldUpdateUser, v))
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNEQ(FieldUpdateUser, v))
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIn(FieldUpdateUser, vs...))
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotIn(FieldUpdateUser, vs...))
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGT(FieldUpdateUser, v))
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldGTE(FieldUpdateUser, v))
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLT(FieldUpdateUser, v))
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v uint64) predicate.PsConfig {
	return predicate.PsConfig(sql.FieldLTE(FieldUpdateUser, v))
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldIsNull(FieldUpdateUser))
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.PsConfig {
	return predicate.PsConfig(sql.FieldNotNull(FieldUpdateUser))
}

// HasStrategy applies the HasEdge predicate on the "strategy" edge.
func HasStrategy() predicate.PsConfig {
	return predicate.PsConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.PsStrategy) predicate.PsConfig {
	return predicate.PsConfig(func(s *sql.Selector) {
		step := newStrategyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PsConfig) predicate.PsConfig {
	return predicate.PsConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PsConfig) predicate.PsConfig {
	return predicate.PsConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PsConfig) predicate.PsConfig {
	return predicate.PsConfig(sql.NotPredicates(p))
}
