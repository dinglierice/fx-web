// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fx-web/internal/ent/psstrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PsStrategy is the model entity for the PsStrategy schema.
type PsStrategy struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner uint64 `json:"owner,omitempty"`
	// ScriptContent holds the value of the "script_content" field.
	ScriptContent string `json:"script_content,omitempty"`
	// IsDelete holds the value of the "is_delete" field.
	IsDelete     int `json:"is_delete,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PsStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case psstrategy.FieldID, psstrategy.FieldOwner, psstrategy.FieldIsDelete:
			values[i] = new(sql.NullInt64)
		case psstrategy.FieldScriptContent:
			values[i] = new(sql.NullString)
		case psstrategy.FieldCreatedAt, psstrategy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PsStrategy fields.
func (ps *PsStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case psstrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = uint64(value.Int64)
		case psstrategy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case psstrategy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		case psstrategy.FieldOwner:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				ps.Owner = uint64(value.Int64)
			}
		case psstrategy.FieldScriptContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_content", values[i])
			} else if value.Valid {
				ps.ScriptContent = value.String
			}
		case psstrategy.FieldIsDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_delete", values[i])
			} else if value.Valid {
				ps.IsDelete = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PsStrategy.
// This includes values selected through modifiers, order, etc.
func (ps *PsStrategy) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// Update returns a builder for updating this PsStrategy.
// Note that you need to call PsStrategy.Unwrap() before calling this method if this PsStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PsStrategy) Update() *PsStrategyUpdateOne {
	return NewPsStrategyClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PsStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PsStrategy) Unwrap() *PsStrategy {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PsStrategy is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PsStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("PsStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(fmt.Sprintf("%v", ps.Owner))
	builder.WriteString(", ")
	builder.WriteString("script_content=")
	builder.WriteString(ps.ScriptContent)
	builder.WriteString(", ")
	builder.WriteString("is_delete=")
	builder.WriteString(fmt.Sprintf("%v", ps.IsDelete))
	builder.WriteByte(')')
	return builder.String()
}

// PsStrategies is a parsable slice of PsStrategy.
type PsStrategies []*PsStrategy
